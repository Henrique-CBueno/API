version: '3.8'

services:
  postgres:
    image: bitnami/postgresql:latest
    environment:
      - POSTGRES_DB=polls
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - polls_pg_data:/bitnami/postgresql
    # Adiciona uma verificação para saber quando o banco está pronto
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d polls"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: bitnami/redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - 'polls_redis_data:/bitnami/redis/data'
    # Adiciona uma verificação para o Redis também (boa prática)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      # Você está montando a pasta 'database' inteira,
      # então a linha montando 'schema.prisma' individualmente não é necessária.
      - ./app.py:/app/app.py
      - ./connection.py:/app/connection.py
      - ./controllers:/app/controllers
      - ./database:/app/database
      - ./pyproject.toml:/app/pyproject.toml
    env_file:
      - ./.env
    # Modifica o depends_on para esperar pela condição "saudável"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    build: .
    working_dir: /app  # <-- O diretório de trabalho é a raiz do app
    command: python -m workers.pdf_worker
    
    environment:
      - PYTHONPATH=/app  # <-- O Python deve procurar módulos a partir da raiz
    volumes:
      - .:/app          # <-- Mapeia o diretório atual (API) para /app
    depends_on:
      - redis
      - app

volumes:
  polls_pg_data:
  polls_redis_data:
